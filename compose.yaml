services:

  backend:
    container_name: backend-audience-allocation
    build: ./backend
    ports:
      - "8080:8080"
    networks:
      - nginx_network
    environment:
      - MODE=local
      - CONFIG_FILE=/config.yaml
    depends_on:
      - redis
    volumes:
      - ./config.yaml:/config.yaml
    command: >
      bash -c "python manage.py makemigrations &&
      python manage.py migrate && python manage.py init_data &&
      gunicorn backend.wsgi:application --bind 0.0.0.0:8080 --timeout 120"


  frontend:
    container_name: frontend-audience-allocation
    build: ./frontend
    ports:
      - "8000:8000"
    volumes:
      - static-data:/frontend/staticfiles
      - ./config.yaml:/config.yaml
    networks:
      - nginx_network
    environment:
      - MODE=local
      - CONFIG_FILE=/config.yaml
    depends_on:
      - backend
    entrypoint: /entrypoint.sh
    command: >
      bash -c "gunicorn frontend.wsgi:application --bind 0.0.0.0:8000 --timeout 120"


  redis:
    container_name: redis-audience-allocation
    image: redis:7-alpine
    networks:
      - nginx_network
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 3


  celery:
    container_name: celery-audience-allocation
    build: ./backend
    networks:
      - nginx_network
    environment:
      - MODE=local
      - CONFIG_FILE=/config.yaml
    depends_on:
      - backend
      - redis
    volumes:
      - ./config.yaml:/config.yaml
    command: >
      celery -A backend worker --loglevel=info


  # postgres:
  #   image: postgres
  #   container_name: postgres-audience-allocation
  #   restart: always
  #   networks:
  #     - nginx_network
  #   environment:
  #     POSTGRES_DB: "postgres"
  #     POSTGRES_USER: "postgres"
  #     POSTGRES_PASSWORD: "postgres"
  #   volumes:
  #     - db-data:/var/lib/postgresql/data
  #   expose:
  #     - 5432
  #   healthcheck:
  #     test: [ "CMD", "pg_isready" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5


volumes:
  static-data:
    external: true
  db-data:
    external: true

networks:
  nginx_network:
    external: true

